// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	entities "NoteProject/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockAuthorization) CheckUser(username, password string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", username, password)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockAuthorizationMockRecorder) CheckUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockAuthorization)(nil).CheckUser), username, password)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user entities.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CheckSession mocks base method.
func (m *MockSession) CheckSession(userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockSessionMockRecorder) CheckSession(userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSession)(nil).CheckSession), userID, token)
}

// CreateSession mocks base method.
func (m *MockSession) CreateSession(userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionMockRecorder) CreateSession(userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSession)(nil).CreateSession), userID, token)
}

// MockNoteManage is a mock of NoteManage interface.
type MockNoteManage struct {
	ctrl     *gomock.Controller
	recorder *MockNoteManageMockRecorder
}

// MockNoteManageMockRecorder is the mock recorder for MockNoteManage.
type MockNoteManageMockRecorder struct {
	mock *MockNoteManage
}

// NewMockNoteManage creates a new mock instance.
func NewMockNoteManage(ctrl *gomock.Controller) *MockNoteManage {
	mock := &MockNoteManage{ctrl: ctrl}
	mock.recorder = &MockNoteManageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteManage) EXPECT() *MockNoteManageMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteManage) CreateNote(userID int, title, text string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", userID, title, text)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteManageMockRecorder) CreateNote(userID, title, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteManage)(nil).CreateNote), userID, title, text)
}

// DeleteNote mocks base method.
func (m *MockNoteManage) DeleteNote(noteID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteManageMockRecorder) DeleteNote(noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNoteManage)(nil).DeleteNote), noteID)
}

// NotesList mocks base method.
func (m *MockNoteManage) NotesList(userID int) ([]entities.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotesList", userID)
	ret0, _ := ret[0].([]entities.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotesList indicates an expected call of NotesList.
func (mr *MockNoteManageMockRecorder) NotesList(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotesList", reflect.TypeOf((*MockNoteManage)(nil).NotesList), userID)
}

// UpdateNote mocks base method.
func (m *MockNoteManage) UpdateNote(note entities.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteManageMockRecorder) UpdateNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNoteManage)(nil).UpdateNote), note)
}
